var broccoliMergeTrees = require('broccoli-merge-trees');
var broccoliStaticCompiler = require('broccoli-static-compiler');
var broccoliLess = require('broccoli-less-single');
var broccoliConcat = require('broccoli-concat');
var broccoliHTML2JS = require('broccoli-html2js');
var broccoliSelect = require('broccoli-select');
var broccoliAutoGenerated = require('broccoli-auto-generated');
var broccoliReplace = require('broccoli-replace');
var broccoliCoffeeScript = require('broccoli-coffee');

// If true (default), create and link to the `desktop.js` file from index.html
var envIsDesktop = true;

// Building for PhoneGap? This will be true for
// `grunt build`, `grunt stare`, `broccoli build`
// turn off `desktop.js` build//link
if(process.argv[2] === 'build' || process.argv[2] === 'stare') {
  envIsDesktop = false;
}

// -----------------------------------------------------------

var vendorDir = 'vendor';
var srcDir = 'src';

// Copy vendor assets
var vendorAssets = ['fontawesome/fonts/*', 'ratchet/fonts/*'];

// Copy src assets
var srcAssets = ['appmedia/*', 'contentmedia/vendors/*', 'data/*'];

// Compile LESS
var lessMain = 'main.less';
var lessOut = 'assets/css/app.css';
var lessSrcTree = ['src/less'];
var lessOptions = {
  compress: false,
  sourceMap: true,
  sourceMapFilename: 'app.css.map',
  sourceMapRootpath: '/assets/css/app.css.map',
  strictImports: true,
  strictMath: true,
  strictUnits: true
};

// Compile vendor CSS
var vendorCSS = [
  // fontawesome.css is used for all <i class="fa..."> tags
  // The less files are used for <starrating> styling
  'fontawesome/css/font-awesome.css',
  'ratchet/css/ratchet.css'
  ,'ratchet/css/ratchet-theme-android.css'
];

// Build templates cache
var templateFiles = ['**/*.tpl.html'];
var htmlMinOptions = {
  removeComments: true,
  collapseWhitespace: true,
  conservativeCollapse: true
};

// -----------------------------------------------------------

// Copy vendor assets
var vendorAssetsTree = broccoliStaticCompiler('vendor', {
  srcDir: '.',
  files: vendorAssets,
  destDir: 'assets/vendor/'
});

// Copy src assets
var srcAssetsTree = broccoliStaticCompiler('src/assets', {
  srcDir: '.',
  files: srcAssets,
  destDir: 'assets/'
});

// Compile LESS
var lessTree = broccoliLess(lessSrcTree, lessMain, lessOut, lessOptions);

// Compile vendor CSS
var vendorCSSTree = broccoliConcat(vendorDir, {
  inputFiles: vendorCSS,
  outputFile: '/assets/css/vendor.css',
  separator: '\n',
  wrapInEval: false
});

// Compile templates module
var templateTree = broccoliHTML2JS(srcDir, {
  inputFiles: templateFiles,
  outputFile: '/src/templates.js',
  module: 'templates',
  singleModule: true,
  htmlmin: htmlMinOptions,
  replace: function (filepath) {
    return filepath.replace(/^(app|common)\//, '', 'g');
  }
});

// The `appConfig` module,
// ie. /src/config.js generated from /config
var appConfig = require('./config/app-config.js');
var configTree = broccoliAutoGenerated('config/', {
  files: ['config.tpl'],
  srcDir: '',
  destDir: '',
  values: {
    config: JSON.stringify(appConfig, null, 2)
  },
  processor: function(template, values) {
    return template.replace('{{{config}}}', values.config);
  }
});

var configTree = broccoliConcat(configTree, {
  inputFiles: ['config.tpl'],
  outputFile: '/src/config.js'
});


// Compile app.js
var srcTree = broccoliSelect('src', {
  acceptFiles: ['**/*.js', '**/*.coffee'],
  rejectFiles: ['**/*.mock.js', '**/*.desktop.js', '**/*.spec.js'],
});

// Compile coffeescript
srcTree = broccoliCoffeeScript(srcTree);

srcTree = broccoliConcat(srcTree, {
  inputFiles: ['**/*.js'],
  outputFile: '/src/app.js',
  separator: '\n',
  wrapInEval: false
});

// Compile vendor.js
var vendorJSTree = broccoliConcat('vendor/', {
  inputFiles: [
    'angular/angular.js',
    'angular/angular-route.js',
    'angular/angular-animate.js',
    'angular/angular-sanitize.js',
    'fastclick/fastclick.js'
  ],
  outputFile: '/src/vendor.js',
  separator: '\n',
  wrapInEval: false
});

// Compile desktop mocks - modules that "emulate" PhoneGap
// on the desktop - ie. the app will run in a desktop browser
var desktopMockJSTree = broccoliConcat('src/', {
  inputFiles: [
    '**/*.desktop.js'
  ],
  outputFile: '/src/desktop.js',
  separator: '\n',
  wrapInEval: false
});

// Copy index.html
var indexHTML = broccoliConcat(srcDir, {
  inputFiles: ['index.html'],
  outputFile: '/index.html',
  separator: '\n',
  wrapInEval: false
});

var indexHTMLDesktop = broccoliReplace(indexHTML, {
  files: [
    'index.html'
  ],
  patterns: [
    {
      match: 'desktop',
      replacement: function() {
        return envIsDesktop ? '<script src="src/desktop.js"></script>' : '';
      }
    }
  ]
});

// Output the final tree
var toMerege = [
  vendorAssetsTree,
  srcAssetsTree,
  lessTree,
  vendorCSSTree,
  templateTree,
  srcTree,
  indexHTML,
  indexHTMLDesktop,
  vendorJSTree,
  configTree
];

// Add desktop.js if required
if(envIsDesktop) {
  toMerege = toMerege.concat([desktopMockJSTree]);
}

module.exports = broccoliMergeTrees(toMerege, {overwrite: true});
